<Window x:Class="LayUp.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LayUp.Views"
        mc:Ignorable="d"
        Title="{DynamicResource MainWindowTitle}" Height="768" Width="1024" WindowStyle="SingleBorderWindow"
        MinWidth="1024"
        xmlns:Common="clr-namespace:LayUp.Common"
        DataContext="{Binding Path=Main, Source={StaticResource Locator}}"
        Icon="/Images/TrayIcons/TM3001.ico"
         xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:command="http://www.galasoft.ch/mvvmlight">
    <Window.Resources>
        <Common:IntToBoolConverter x:Key="IntToBoolConverter1"/>
        <Common:IntToBoolConverter x:Key="IntToBoolConverter2"/>
        <Common:IntToColorConverter x:Key="IntToColorConverter1"/>
        <Common:BoolToStringConverter x:Key="BoolToStringConverter1"/>
        <Common:IntToStringConverter x:Key="IntToStringConverter1"/>
        <Common:MutilValueConverter x:Key="MutilValueConverter1"/>
        <Common:StringToPageConverter x:Key="StringToPageConverter1"/>
        <Common:ReverseBoolConverter x:Key="ReverseBoolConverter"></Common:ReverseBoolConverter>





        <!--输入信号显示样式-->
        <Style x:Key="TextBox1" TargetType="{x:Type TextBox}" >
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False" >
                    <Setter Property="Background" Value="White"  />
                </Trigger>
            </Style.Triggers>

            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="1.2"/>
            <Setter Property="Margin" Value="5,2,5,2"/>
            <Setter Property="FontSize" Value="14"/>
        </Style>
        <Style x:Key="ButtonInput1" TargetType="{x:Type Button}" >


            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="1.2"/>
            <Setter Property="Margin" Value="5,2,5,2"/>
            <Setter Property="FontSize" Value="14"/>
        </Style>

        <Style x:Key="LabelInputStyle" TargetType="Label">
            <Setter Property="Margin" Value="5,2,5,2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Label">
                        <Grid>
                            <Rectangle MinWidth="20" Margin="0" Stroke="#FFABADB3" StrokeThickness="1" ></Rectangle>
                            <ContentPresenter Margin="2,0,2,0" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" RecognizesAccessKey="True"  />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--输出信号显示样式-->
        <Style x:Key="ButtonOutputStyle" TargetType="Button">
            <Setter Property="Height" Value="40"/>
            <Setter Property="Margin" Value="5,2,5,2"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Command" Value="{Binding SwitchOutputCommand}"/>

        </Style>
        <ControlTemplate  x:Key="ButtonInputTemplate1" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>

            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <!--<Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFE41E1E"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                </Trigger>-->
                <!--<Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                </Trigger>-->
                <!--<Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                </Trigger>-->
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                    <Setter Property="Foreground" Value="#FF838383"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate  x:Key="ButtonOutputTemplate1" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>


            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <!--<Setter Property="Background" TargetName="border" Value="#FFE41E1E"/>-->
                    <Setter Property="BorderThickness" TargetName="border" Value="3"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>

                </Trigger>
                <!--<Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                </Trigger>-->
                <!--<Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                </Trigger>-->
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                    <Setter Property="Foreground" Value="#FF838383"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--#region dataGrid样式 -->

        <Style x:Key="CenterAlignmentStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="Height" Value="auto"/>
            <Setter Property="TextAlignment" Value="Center"/>
        </Style>


        <!--#endregion-->
    </Window.Resources>


    <DockPanel >
        <!--菜单栏-->
        <Grid DockPanel.Dock="Top" Height="30">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="43*"/>
                <ColumnDefinition Width="296*"/>
            </Grid.ColumnDefinitions>
            <Menu Height="25" Grid.ColumnSpan="2" Margin="0,3,-0.4,2">
                <MenuItem Header="{DynamicResource iconTraySettings}">
                    <MenuItem Header="{DynamicResource language}">
                        <MenuItem Header="中文" Command="{Binding SwitchLangugeCommand}" CommandParameter="zh-cn"/>
                        <MenuItem Header="English" Command="{Binding SwitchLangugeCommand}" CommandParameter="en"></MenuItem>

                    </MenuItem>
                    <MenuItem Header="打印设置" Command="{Binding OpenPrintSetupCommand}" />
                    <MenuItem Header="打印预览" Command="{Binding OpenPrintPreviewCommand}"/>
                    <MenuItem Header="{DynamicResource Setting}"  Command="{Binding ShowSettingWindowCommand}" CommandParameter="View2"></MenuItem>
                    <MenuItem Header="{DynamicResource IOTable}"  Command="{Binding ShowIOWindowCommand}" CommandParameter="IOTable"></MenuItem>
                    <!--<MenuItem Header="{DynamicResource CustomError}" Command="{Binding ShowView2Command}"></MenuItem>-->
                </MenuItem>
            </Menu>
        </Grid>
        <!--状态栏-->
        <StatusBar DockPanel.Dock="Bottom" Height="30">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="250" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="150" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="150" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="150" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="150" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="0" >
                <StackPanel Orientation="Horizontal" >
                    <TextBlock Text="{DynamicResource ReturnCode}"></TextBlock>
                    <TextBlock Text="{Binding LayupPLC.RetrunCode, Mode=OneWay}" />
                </StackPanel>

            </StatusBarItem>
            <Separator Grid.Column="1" />
            <StatusBarItem Grid.Column="2" >

                <!--通过使用Buttong的控件模板，使StatusBarItem可以单击-->
                <!--<Button  >
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <StackPanel Orientation="Horizontal" MinHeight="30" MinWidth="120" VerticalAlignment="Center">
                                <TextBlock Text="{DynamicResource CurrentError}" VerticalAlignment="Center"></TextBlock>
                                <TextBlock Foreground="Red" VerticalAlignment="Center" Name="lblCursorPosition" Text="{Binding ErrorCode}" />
                            </StackPanel>
                        </ControlTemplate>
                    </Button.Template>
                </Button>-->
                <StackPanel Orientation="Horizontal" >
                    <TextBlock Text="检测台返回值："></TextBlock>
                    <TextBlock Text="{Binding SerialReceviedValue, Mode=OneWay}" />
                </StackPanel>




            </StatusBarItem>
            <Separator Grid.Column="3" />
            <StatusBarItem Grid.Column="4">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="PLC连接状态:  "></TextBlock>
                    <TextBlock  Name="lblCursorPosition1" Text="{Binding LayupPLC.IsConnected, Converter={StaticResource BoolToStringConverter1}}" />
                </StackPanel>

            </StatusBarItem>

            <Separator Grid.Column="5" />
            <StatusBarItem Grid.Column="6">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="串口连接状态: "></TextBlock>
                    <TextBlock Text="{ Binding IsSerialPortConnected, Mode=OneWay}"></TextBlock>
                </StackPanel>
            </StatusBarItem>
            <Separator Grid.Column="7" />
            <StatusBarItem Grid.Column="8">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="打印机状态: "></TextBlock>
                    <TextBlock Text="{ Binding PrinterStatus, Mode=OneWay}"></TextBlock>
                </StackPanel>
            </StatusBarItem>
            <Separator Grid.Column="9"></Separator>
            <StatusBarItem Grid.Column="10">
                <TextBlock Name="TxtCurrentTime"  HorizontalAlignment="Center"  Height="16" />
            </StatusBarItem>
        </StatusBar>
        <!--显示区-->
        <Grid DockPanel.Dock="Top" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="8*"/>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="2*"/>
            </Grid.ColumnDefinitions>
            <!--#region 主显示区-->
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="5*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <!--图形显示区-->
                <GroupBox Header="{DynamicResource ReceivedDataDiagram}" Margin="0,0,0,0">

                    <Grid Grid.Row="1" >
                        <DataGrid  x:Name="dg2" CanUserAddRows="False"  AllowDrop="True" IsReadOnly="True" CanUserReorderColumns="False"
                                   ItemsSource="{Binding Results, Mode=TwoWay, IsAsync=True,UpdateSourceTrigger=PropertyChanged}" 
                                   AutomationProperties.IsRowHeader="True"    EnableRowVirtualization="True"
                                   EnableColumnVirtualization="True" SelectionUnit="FullRow"  SelectionMode="Single"  
                                    CanUserSortColumns="False" CanUserResizeColumns="False" AutoGenerateColumns="False"
                                    >
                            <DataGrid.Columns>
                                <DataGridTextColumn  Header="序号"  Binding="{Binding Index }" Width="100" ElementStyle="{StaticResource CenterAlignmentStyle}" />
                                <DataGridTextColumn Header="时间" Binding="{Binding dateTime}" Width="200" ElementStyle="{StaticResource CenterAlignmentStyle}" />
                                <DataGridTextColumn Header="结果数据"  Binding="{Binding ResultValue}" Width="100" ElementStyle="{StaticResource CenterAlignmentStyle}" />
                                <DataGridTextColumn Header=" 判定数据"  Binding="{Binding IsOk}" Width="100" ElementStyle="{StaticResource CenterAlignmentStyle}" >

                                </DataGridTextColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>

                </GroupBox>
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <GroupBox Header="数据参数" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="60" />
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition  />
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <TextBlock Margin="2" Text="最大值:" TextAlignment="Center" Grid.Column="0" Grid.Row="0"></TextBlock>
                            <TextBox Text="{Binding TolUpperLimit,UpdateSourceTrigger=LostFocus}" IsEnabled="{Binding ElementName=AllowInput,Path=IsChecked}" Margin="2" Grid.Column="1" Grid.Row="0"/>
                            <TextBlock Margin="2" Text="最小值:" TextAlignment="Center"  Grid.Column="0" Grid.Row="1"></TextBlock>
                            <TextBox Text="{Binding TolLowerLimit, UpdateSourceTrigger=LostFocus}"  IsEnabled="{Binding ElementName=AllowInput,Path=IsChecked}" Margin="2" Grid.Column="1" Grid.Row="1"/>
                            <CheckBox Content="手动输入公差" x:Name="AllowInput" Margin="30,10,10,2" Grid.Column="1" Grid.Row="2"/>
                            <Button Content="确定"  IsEnabled="{Binding ElementName=AllowInput,Path=IsChecked}" Width="80" Grid.Row="2" Grid.Column="2"/>
                        </Grid>
                    </GroupBox>
                    <GroupBox Header="数据操作" Grid.Column="1">
                        <Grid>
                            <Button x:Name="button1" Content="清空数据" HorizontalAlignment="Center" Height="28.5"   VerticalAlignment="Center" Width="97.5" Command="{Binding ClearReceviedDataCommand}"/>

                        </Grid>

                    </GroupBox>
                  
                </Grid>   

            </Grid>

            <!--#region 设置区-->
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="4*"/>
                    <RowDefinition Height="3*"/>
                </Grid.RowDefinitions>
                <GroupBox Header="{DynamicResource Parameters}" Grid.Row="0">
                    <Grid Margin="0,5,0,0"   >
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <TextBlock Text="原点拍照点距离" Grid.Row="0" VerticalAlignment="Center" />
                        <TextBox x:Name="txtData224" Text="{Binding PhotoDistance}" IsEnabled="{Binding LayupPLC.IsConnected}" HorizontalAlignment="Right" Grid.Row="1" VerticalAlignment="Center" Height="20" MinWidth="80" Margin="0,1.8,52.6,1.4" />
                        <Label Content="mm"  Grid.Row="1" HorizontalAlignment="Right"/>
                        <TextBlock  Text="工件间隔" Grid.Row="2" VerticalAlignment="Center" />
                        <TextBox  x:Name="txtData232" Text="{Binding WorkpieceInterval}" IsEnabled="{Binding LayupPLC.IsConnected}"  HorizontalAlignment="Right" Grid.Row="2" VerticalAlignment="Center" Height="20" MinWidth="80" Margin="0,21.6,52.6,3.2" Grid.RowSpan="2" />
                        <Label Content="mm"  Grid.Row="3" HorizontalAlignment="Right"/>
                        <TextBlock Text="前进速度" Grid.Row="4" VerticalAlignment="Center" />
                        <TextBox  x:Name="txtData234" Text="{Binding ForwardVelocity}" IsEnabled="{Binding LayupPLC.IsConnected}" HorizontalAlignment="Right" Grid.Row="5" VerticalAlignment="Bottom" Height="20" MinWidth="80" Margin="0,0,52.6,21.4" Grid.RowSpan="2" />
                        <Label Content="mm/s"  Grid.Row="5" HorizontalAlignment="Right"/>
                        <TextBlock Text="复位速度" Grid.Row="6" VerticalAlignment="Center" />
                        <TextBox  x:Name="txtData228" Text="{Binding ReturnVelocity}" IsEnabled="{Binding LayupPLC.IsConnected}"  HorizontalAlignment="Right" Grid.Row="7" VerticalAlignment="Center" Height="20" MinWidth="80" Margin="0,1.6,53.6,0.8" />
                        <Label Content="mm/s"  Grid.Row="7" HorizontalAlignment="Right"/>
                        <TextBlock Text="爬行速度" Grid.Row="8" VerticalAlignment="Center" />
                        <TextBox  x:Name="txtData226" Text="{Binding JogVelocity}" IsEnabled="{Binding LayupPLC.IsConnected}" HorizontalAlignment="Right" Grid.Row="9" VerticalAlignment="Center" Height="20" MinWidth="80" Margin="0,1.8,52.6,0.6"/>
                        <Label Content="mm/s"  Grid.Row="9" HorizontalAlignment="Right"/>
                        <TextBlock Text="原点回归开始速度" Grid.Row="10" VerticalAlignment="Center" />
                        <TextBox  x:Name="txtData230" Text="{Binding StartVelocity}" IsEnabled="{Binding LayupPLC.IsConnected}" HorizontalAlignment="Right" Grid.Row="11" VerticalAlignment="Center" Height="20" MinWidth="80" Margin="0,1,52.6,1.4" />
                        <Label Content="mm/s"  Grid.Row="11" HorizontalAlignment="Right"/>
                        <TextBlock Text="工件数量" Grid.Row="12" VerticalAlignment="Center" />
                        <TextBox  x:Name="txtData236" Text="{Binding WorkpieceQuantity}" IsEnabled="{Binding LayupPLC.IsConnected}" HorizontalAlignment="Right" Grid.Row="13" VerticalAlignment="Center" Height="20" MinWidth="80" Margin="0,1.2,53.6,1.2" />
                        <Label Content="个"  Grid.Row="13" HorizontalAlignment="Right"/>

                        <Button Command="{Binding WriteDataCommand}" Content="{DynamicResource Conform}" IsEnabled="{Binding LayupPLC.IsConnected}" Grid.Row="14" Grid.RowSpan="2" Margin="10" >
                            <Button.CommandParameter>
                                <MultiBinding Converter="{StaticResource MutilValueConverter1}">
                                    <Binding Path="Text" ElementName="txtData224"/>
                                    <Binding Path="Text" ElementName="txtData226"/>
                                    <Binding Path="Text" ElementName="txtData228"/>
                                    <Binding Path="Text" ElementName="txtData230"/>
                                    <Binding Path="Text" ElementName="txtData232"/>
                                    <Binding Path="Text" ElementName="txtData234"/>
                                    <Binding Path="Text" ElementName="txtData236"/>

                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                    </Grid>
                </GroupBox>

            </Grid>
            <!--#endregion-->
            <!--侧边栏-->
            <Grid Grid.Column="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="59*"/>
                    <RowDefinition Height="167*"/>
                </Grid.RowDefinitions>
                <StackPanel Margin="0,0,-0.4,0" Grid.Row="0">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="2*"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock FontSize="13" VerticalAlignment="Bottom" TextAlignment="Center" Grid.Column="0" Grid.Row="0" Text="{DynamicResource ConnectionType}" Grid.ColumnSpan="2" Margin="0,0,112.6,2.4"  ></TextBlock>
                        <ComboBox   IsEnabled="{Binding LayupPLC.IsConnected ,Converter={StaticResource ReverseBoolConverter}}" HorizontalAlignment="Center"  MinWidth="100"  Grid.Column="1" Grid.Row="0"  FontSize="12"  SelectedIndex="0"  Height="22" VerticalAlignment="Bottom"  >

                            <ComboBoxItem Content="MX Component" >
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Selected">
                                        <command:EventToCommand Command="{Binding ChangeConnectionTypeCommand  }" CommandParameter="MXComponent" />

                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBoxItem>

                        </ComboBox>

                    </Grid>

                    <GroupBox Header="{DynamicResource InformationOfPLC}" Name="GrpPLC" >
                        <Frame x:Name="Frame" NavigationUIVisibility="Hidden" Content="{Binding LayupPLC.ConnectionMethod,Converter={StaticResource StringToPageConverter1}}" />
                    </GroupBox>
                    <Grid Margin="0,10,0,10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="53*"/>
                            <ColumnDefinition Width="32*"/>
                            <ColumnDefinition Width="85*"/>
                        </Grid.ColumnDefinitions>
                        <Button  Content="{DynamicResource Connect}" Command="{Binding ConnectCommand}"   Width="80" Height="29" Margin="2,0,2.8,-0.2" VerticalAlignment="Bottom" Grid.ColumnSpan="2"  />
                        <Button x:Name="Button1" Grid.Column="2" Content="{DynamicResource Disconnect}"  Command="{Binding StopMonitorCommand}"  Width="80" Margin="2.2,0,2.6,-0.2" />


                    </Grid>
                </StackPanel>
                <StackPanel Margin="0,10,-0.4,414" Grid.Row="1">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="2*"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock FontSize="13" VerticalAlignment="Bottom" TextAlignment="Center" Grid.Column="0" Grid.Row="0" Text="串口" Grid.ColumnSpan="2" Margin="0,0,112.6,2.4"  ></TextBlock>
                        <ComboBox x:Name="comboBox1" ItemsSource="{Binding SerialPorts}" SelectedItem="{Binding SerialPortName}"   IsEnabled="{Binding IsSerialPortConnected ,Converter={StaticResource ReverseBoolConverter}}" HorizontalAlignment="Center"  MinWidth="100"  Grid.Column="1" Grid.Row="0"  FontSize="12"  SelectedIndex="0"  Height="22" VerticalAlignment="Bottom"  >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <command:EventToCommand Command="{Binding ChangeSerialPortCommand  }" CommandParameter="{Binding SelectedItem, ElementName=comboBox1}" />

                                </i:EventTrigger>
                            </i:Interaction.Triggers>


                        </ComboBox>

                    </Grid>

                    <Grid Margin="0,10,0,10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="53*"/>
                            <ColumnDefinition Width="32*"/>
                            <ColumnDefinition Width="85*"/>
                        </Grid.ColumnDefinitions>
                        <Button  Content="连接串口" Command="{Binding OpenSerialPortCommand}"   Width="80" Height="29" Margin="2,0,2.8,-0.2" VerticalAlignment="Bottom" Grid.ColumnSpan="2"  />
                        <Button  Grid.Column="2" Content="断开串口" Command="{Binding CloseSerialPortCommand}"  Width="80" Margin="2.2,0,2.6,-0.2" />


                    </Grid>
                </StackPanel>
                <Button Command="{Binding PrintCommand}"  x:Name="button" Content="打印" HorizontalAlignment="Left" Height="31.2" Margin="64,250.496,0,0" Grid.Row="1" VerticalAlignment="Top" Width="95.6"  IsEnabled="{Binding IsAutoPrint, Converter={StaticResource ReverseBoolConverter}}"/>
                <CheckBox x:Name="checkBox" Content="自动打印" HorizontalAlignment="Left" Height="26.8" Margin="70.5,219.196,0,0" Grid.Row="1" VerticalAlignment="Top" Width="74.4" IsChecked="{Binding IsAutoPrint}" RenderTransformOrigin="0.5,0.5">
                    <CheckBox.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform AngleX="2.981"/>
                            <RotateTransform/>
                            <TranslateTransform X="0.698"/>
                        </TransformGroup>
                    </CheckBox.RenderTransform>
                </CheckBox>
                <ComboBox x:Name="comboBox" IsEnabled="{Binding IsAutoPrint ,Converter={StaticResource ReverseBoolConverter}}" HorizontalAlignment="Left" Height="26.8" Margin="10,176.896,0,0" Grid.Row="1" VerticalAlignment="Top" Width="149.6" ItemsSource="{Binding Printers}" Text="{Binding SelectedPrinterName}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <command:EventToCommand Command="{Binding ChangePrinterCommand  }" CommandParameter="{Binding SelectedItem, ElementName=comboBox}" />

                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
                <Label x:Name="textBox" HorizontalAlignment="Left" Height="26.8" Margin="10,145,0,0" Content="选择打印机" VerticalAlignment="Top" Width="87.6" Grid.Row="1" RenderTransformOrigin="1.311,0.369"/>


            </Grid>


            <tb:TaskbarIcon x:Name="myNotifyIcon"
                    Visibility="Visible"
                    ToolTipText="检测台"
                    IconSource="/Images/TrayIcons/TM3001.ico"
                    
                    MenuActivation="LeftOrRightClick"
                   
                    PopupActivation="DoubleClick">
                <tb:TaskbarIcon.ContextMenu >
                    <ContextMenu Background="White" MenuItem.Click="ContextMenu_Click" >
                        <MenuItem Tag="MenuNormal"  Header="{DynamicResource iconTrayOpen}"/>
                        <MenuItem Tag="MenuMin" Header="最小化"/>
                        <MenuItem Tag="MenuClose" Header="{DynamicResource iconTrayExit}"/>
                    </ContextMenu>
                </tb:TaskbarIcon.ContextMenu>
            </tb:TaskbarIcon>



        </Grid>

    </DockPanel>

</Window>
